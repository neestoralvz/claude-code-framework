#!/bin/bash

# Pattern Accumulation Monitoring Script
# Created by Pattern Management Specialist
# Purpose: Monitor for new pattern duplication accumulation

set -e

# Configuration
BASELINE_FILE="/Users/nalve/.claude/docs/patterns/registry/baseline_metrics.json"
CURRENT_METRICS_FILE="/tmp/current_pattern_metrics.json"
ALERT_THRESHOLD=5  # Alert if more than 5 new patterns detected

log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S'): $1" | tee -a /Users/nalve/.claude/docs/patterns/registry/monitoring.log
}

scan_current_patterns() {
    log_message "Starting pattern accumulation scan..."
    
    # Count current pattern occurrences
    success_criteria_count=$(grep -r "## Success Criteria" --include="*.md" /Users/nalve/.claude | wc -l | tr -d ' ')
    toc_count=$(grep -r "## TABLE OF CONTENTS\|## ðŸ“‹ TABLE OF CONTENTS" --include="*.md" /Users/nalve/.claude | wc -l | tr -d ' ')
    agent_selection_count=$(grep -r "agent selection\|Agent Selection" --include="*.md" /Users/nalve/.claude | wc -l | tr -d ' ')
    
    # Generate current metrics JSON
    cat > "$CURRENT_METRICS_FILE" << EOF
{
  "scan_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "success_criteria_count": $success_criteria_count,
  "toc_count": $toc_count,
  "agent_selection_count": $agent_selection_count,
  "total_patterns": $((success_criteria_count + toc_count + agent_selection_count))
}
EOF
    
    log_message "Pattern scan complete: SC=$success_criteria_count, TOC=$toc_count, AS=$agent_selection_count"
}

check_pattern_accumulation() {
    if [ ! -f "$BASELINE_FILE" ]; then
        log_message "No baseline found, creating initial baseline..."
        cp "$CURRENT_METRICS_FILE" "$BASELINE_FILE"
        return 0
    fi
    
    # Extract baseline and current counts
    baseline_sc=$(jq -r '.success_criteria_baseline // 389' "$BASELINE_FILE")
    baseline_toc=$(jq -r '.toc_baseline // 147' "$BASELINE_FILE")
    baseline_as=$(jq -r '.agent_selection_baseline // 307' "$BASELINE_FILE")
    
    current_sc=$(jq -r '.success_criteria_count' "$CURRENT_METRICS_FILE")
    current_toc=$(jq -r '.toc_count' "$CURRENT_METRICS_FILE")
    current_as=$(jq -r '.agent_selection_count' "$CURRENT_METRICS_FILE")
    
    # Calculate increases
    sc_increase=$((current_sc - baseline_sc))
    toc_increase=$((current_toc - baseline_toc))
    as_increase=$((current_as - baseline_as))
    
    log_message "Pattern changes: SC(+$sc_increase), TOC(+$toc_increase), AS(+$as_increase)"
    
    # Check if any increases exceed threshold
    if [ "$sc_increase" -gt "$ALERT_THRESHOLD" ] || [ "$toc_increase" -gt "$ALERT_THRESHOLD" ] || [ "$as_increase" -gt "$ALERT_THRESHOLD" ]; then
        generate_alert "$sc_increase" "$toc_increase" "$as_increase"
    fi
}

generate_alert() {
    local sc_inc=$1
    local toc_inc=$2
    local as_inc=$3
    
    local alert_file="/Users/nalve/.claude/docs/patterns/alerts/pattern_alert_$(date +%Y%m%d_%H%M%S).txt"
    
    mkdir -p "$(dirname "$alert_file")"
    
    cat > "$alert_file" << EOF
PATTERN ACCUMULATION ALERT
==========================
Alert Time: $(date)
Alert Level: WARNING

Pattern Increases Detected:
- Success Criteria: +$sc_inc (threshold: $ALERT_THRESHOLD)
- Table of Contents: +$toc_inc (threshold: $ALERT_THRESHOLD)  
- Agent Selection: +$as_inc (threshold: $ALERT_THRESHOLD)

Recommended Actions:
1. Review recent commits for new pattern duplication
2. Consider immediate consolidation for high-increase patterns
3. Engage Pattern Management Specialist for analysis
4. Update development guidelines to prevent further accumulation

Generated by: Pattern Management Specialist Monitoring System
EOF
    
    log_message "ALERT: Pattern accumulation detected! Alert file: $alert_file"
    
    # Display alert to console
    cat "$alert_file"
}

update_registry_metrics() {
    # Update the pattern registry with current metrics
    local registry_file="/Users/nalve/.claude/docs/patterns/registry/pattern-inventory.json"
    
    if [ -f "$registry_file" ]; then
        log_message "Updating pattern registry metrics..."
        
        # Use temporary file for atomic update
        local temp_file="/tmp/registry_update.json"
        
        jq --slurpfile current "$CURRENT_METRICS_FILE" '
        .registry_metadata.last_scan = $current[0].scan_date |
        .pattern_inventory.success_criteria.current_occurrences = $current[0].success_criteria_count |
        .pattern_inventory.table_of_contents.current_occurrences = $current[0].toc_count |
        .pattern_inventory.agent_selection.current_occurrences = $current[0].agent_selection_count
        ' "$registry_file" > "$temp_file"
        
        mv "$temp_file" "$registry_file"
        log_message "Registry metrics updated successfully"
    fi
}

# Main execution
main() {
    log_message "Pattern Management Specialist monitoring initiated"
    
    scan_current_patterns
    check_pattern_accumulation
    update_registry_metrics
    
    log_message "Pattern monitoring cycle complete"
}

# Execute if run directly
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    main "$@"
fi